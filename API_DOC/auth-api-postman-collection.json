{
  "info": {
    "name": "Authentication API Collection",
    "description": "Complete authentication API collection including user registration, login, token management, OTP verification, password reset, and admin authentication",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "userPhone",
      "value": "+1234567890",
      "type": "string"
    },
    {
      "key": "adminEmail",
      "value": "admin@example.com",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "User Authentication",
      "description": "User registration, login, and basic authentication endpoints",
      "item": [
        {
          "name": "User Sign-in (Registration)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{userPhone}}\",\n  \"password\": \"password123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"accountRole\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-in"]
            },
            "description": "Create a new user account. Returns access token and sets refresh token cookie."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    console.log('Access token saved:', response.accessToken);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Seller Sign-in",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"+1234567891\",\n  \"password\": \"password123\",\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"accountRole\": \"seller\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/seller-sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "seller-sign-in"]
            },
            "description": "Create a new seller account. Same functionality as user sign-in."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/log-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "log-in"]
            },
            "description": "Authenticate existing user with email and password."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    console.log('Login successful, access token saved');",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Token Management",
      "description": "Token refresh and logout endpoints",
      "item": [
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh expired access token using refresh token from cookie."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    console.log('Token refreshed successfully');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/auth/log-out",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "log-out"]
            },
            "description": "Logout user and invalidate refresh token."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.environment.set('accessToken', '');",
                  "    console.log('Logout successful, tokens cleared');",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "OTP & Verification",
      "description": "OTP verification and password reset endpoints",
      "item": [
        {
          "name": "Verify OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"access_token\": \"{{accessToken}}\",\n  \"otp\": \"12345\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-otp"]
            },
            "description": "Verify OTP for phone number verification after registration."
          },
          "response": []
        },
        {
          "name": "Verify Reset OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"access_token\": \"{{accessToken}}\",\n  \"otp\": \"12345\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-reset-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-reset-otp"]
            },
            "description": "Verify OTP for password reset process."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('resetToken', response.token);",
                  "    console.log('Reset OTP verified, reset token saved');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"access_token\": \"{{accessToken}}\",\n  \"otp\": \"12345\",\n  \"newPassword\": \"newPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "Reset user password after OTP verification."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Authentication",
      "description": "Admin login and employee registration endpoints",
      "item": [
        {
          "name": "Admin Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"adminPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "auth", "login"]
            },
            "description": "Authenticate admin users (SUPER_ADMIN, ADMIN, EMPLOYEE, OPERATOR roles)."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.access_token);",
                  "    console.log('Admin login successful');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Employee Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Employee\",\n  \"lastName\": \"Test\",\n  \"phoneNumber\": \"+1234567892\",\n  \"email\": \"employee@example.com\",\n  \"password\": \"employeePassword123\",\n  \"inviteCode\": \"INVITE123\",\n  \"image\": \"\",\n  \"birthday\": \"1990-01-15T00:00:00.000Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "auth", "register"]
            },
            "description": "Register new employee using invite code."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Testing",
      "description": "Test various error scenarios",
      "item": [
        {
          "name": "Invalid Login Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/log-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "log-in"]
            },
            "description": "Test invalid login credentials error response."
          },
          "response": []
        },
        {
          "name": "Duplicate User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{userPhone}}\",\n  \"password\": \"password123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"accountRole\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-in"]
            },
            "description": "Test duplicate user registration error."
          },
          "response": []
        },
        {
          "name": "Invalid OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"access_token\": \"{{accessToken}}\",\n  \"otp\": \"00000\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-otp"]
            },
            "description": "Test invalid OTP error response."
          },
          "response": []
        },
        {
          "name": "Missing Access Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"otp\": \"12345\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-otp"]
            },
            "description": "Test missing access token error."
          },
          "response": []
        },
        {
          "name": "Invalid Invite Code",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Employee\",\n  \"lastName\": \"Test\",\n  \"phoneNumber\": \"+1234567893\",\n  \"email\": \"employee2@example.com\",\n  \"password\": \"employeePassword123\",\n  \"inviteCode\": \"INVALID123\",\n  \"image\": \"\",\n  \"birthday\": \"1990-01-15T00:00:00.000Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "auth", "register"]
            },
            "description": "Test invalid invite code error."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Validation Testing",
      "description": "Test validation errors and edge cases",
      "item": [
        {
          "name": "Empty Request Body - Sign-in",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-in"]
            },
            "description": "Test validation error with empty request body."
          },
          "response": []
        },
        {
          "name": "Missing Required Fields - Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/log-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "log-in"]
            },
            "description": "Test validation error with missing password field."
          },
          "response": []
        },
        {
          "name": "Invalid Email Format",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/log-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "log-in"]
            },
            "description": "Test with invalid email format."
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url.toString());",
          "",
          "// Set dynamic timestamp for unique data",
          "const timestamp = Date.now();",
          "pm.environment.set('timestamp', timestamp);",
          "",
          "// Generate unique phone number for testing",
          "const uniquePhone = '+123456' + Math.floor(Math.random() * 10000);",
          "pm.environment.set('uniquePhone', uniquePhone);",
          "",
          "// Generate unique email for testing",
          "const uniqueEmail = 'test' + timestamp + '@example.com';",
          "pm.environment.set('uniqueEmail', uniqueEmail);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct content type', function () {",
          "    if (pm.response.headers.get('Content-Type')) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});",
          "",
          "// Test successful responses",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    pm.test('Successful response structure', function () {",
          "        const response = pm.response.json();",
          "        // Check if it's an authentication response",
          "        if (response.accessToken || response.access_token) {",
          "            pm.test('Authentication response has token', function () {",
          "                pm.expect(response.accessToken || response.access_token).to.be.a('string');",
          "                pm.expect(response.accessToken || response.access_token).to.not.be.empty;",
          "            });",
          "        }",
          "    });",
          "}",
          "",
          "// Test error responses",
          "if (pm.response.code >= 400) {",
          "    pm.test('Error response has correct structure', function () {",
          "        const response = pm.response.json();",
          "        pm.expect(response).to.have.property('error');",
          "        pm.expect(response.error).to.have.property('code');",
          "        pm.expect(response.error).to.have.property('message');",
          "        pm.expect(response.error).to.have.property('errorType');",
          "        pm.expect(response.error).to.have.property('path');",
          "        pm.expect(response.error).to.have.property('time');",
          "    });",
          "",
          "    pm.test('Error code is valid', function () {",
          "        const response = pm.response.json();",
          "        pm.expect(response.error.code).to.be.a('number');",
          "        pm.expect(response.error.code).to.be.greaterThan(0);",
          "    });",
          "}",
          "",
          "// Log response for debugging",
          "console.log('Response Status:', pm.response.code);",
          "console.log('Response Body:', pm.response.text());"
        ]
      }
    }
  ]
}
