{
  "info": {
    "name": "Employee Management Systems API",
    "description": "Complete API collection for Technologies, Departments, and Positions management systems",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "12345678-1234-1234-1234-123456789012"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "departmentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "positionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "technologyId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Admin Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.accessToken);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.accessToken).to.not.be.undefined;",
                  "    });",
                  "} else {",
                  "    pm.test('Login failed', function () {",
                  "        pm.expect(pm.response.code).to.equal(200);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Technologies",
      "item": [
        {
          "name": "Get Technology Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/technology",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "technology"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has count and status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('count');",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Technologies",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/technology/all",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "technology", "all"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.json().length > 0) {",
                  "    pm.collectionVariables.set('technologyId', pm.response.json()[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Technology",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"React\",\n  \"description\": \"A JavaScript library for building user interfaces\",\n  \"icon\": \"react-icon.png\",\n  \"website\": \"https://reactjs.org\",\n  \"version\": \"18.2.0\",\n  \"category\": \"Frontend Framework\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/technology",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "technology"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id || response._id) {",
                  "        pm.collectionVariables.set('technologyId', response.id || response._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Technology by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/technology/{{technologyId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "technology", "{{technologyId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has technology details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('version');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Technology",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"React\",\n  \"description\": \"A JavaScript library for building user interfaces - Updated\",\n  \"status\": \"ACTIVE\",\n  \"icon\": \"react-icon-new.png\",\n  \"website\": \"https://reactjs.org\",\n  \"version\": \"18.3.0\",\n  \"category\": \"Frontend Framework\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/technology/{{technologyId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "technology", "{{technologyId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Technology",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/technology/{{technologyId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "technology", "{{technologyId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Departments",
      "item": [
        {
          "name": "Get All Departments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/department",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "department"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.json().length > 0) {",
                  "    pm.collectionVariables.set('departmentId', pm.response.json()[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Department",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Engineering\",\n  \"description\": \"Software development and engineering department\",\n  \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/department",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "department"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id || response._id) {",
                  "        pm.collectionVariables.set('departmentId', response.id || response._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Department by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/department/{{departmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "department", "{{departmentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has department details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('name');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Department",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Engineering\",\n  \"description\": \"Software development and engineering department - Updated\",\n  \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/department/{{departmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "department", "{{departmentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Department",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/department/{{departmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "department", "{{departmentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Positions",
      "item": [
        {
          "name": "Get All Positions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/position",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "position"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.json().length > 0) {",
                  "    pm.collectionVariables.set('positionId', pm.response.json()[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Position",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Senior Developer\",\n  \"departmentId\": \"{{departmentId}}\",\n  \"description\": \"Senior software developer position\",\n  \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/position",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "position"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id || response._id) {",
                  "        pm.collectionVariables.set('positionId', response.id || response._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Position by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/position/{{positionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "position", "{{positionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has position details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('department');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Position",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Senior Developer\",\n  \"departmentId\": \"{{departmentId}}\",\n  \"description\": \"Senior software developer position - Updated\",\n  \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/position/{{positionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "position", "{{positionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Position",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/position/{{positionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "position", "{{positionId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Test Technology Already Exists",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"React\",\n  \"description\": \"Duplicate technology test\",\n  \"icon\": \"react-icon.png\",\n  \"website\": \"https://reactjs.org\",\n  \"version\": \"18.2.0\",\n  \"category\": \"Frontend Framework\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/technology",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "technology"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return error for duplicate technology', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Error response has correct structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.have.property('code');",
                  "    pm.expect(response.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Invalid Department ID for Position",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Position\",\n  \"departmentId\": \"507f1f77bcf86cd799439999\",\n  \"description\": \"Test position with invalid department\",\n  \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/position",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "position"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return error for invalid department', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Error response has correct structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Validation Error - Missing Required Fields",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Missing name field\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/department",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "department"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return validation error', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Error response indicates validation error', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error.code).to.equal(70000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
